#include <iostream>
#include <fstream>
#include <vector>
#include <complex>
#include <cmath>
#include <algorithm>

using namespace std;

typedef complex<double> Complex;
const double PI = 3.14159265358979323846;

// ================== –î–ü–§ —Ñ—É–Ω–∫—Ü–∏–∏ ==================
vector<Complex> computeDFT(const vector<Complex>& input) {
    int N = input.size();
    vector<Complex> output(N);
    double scale = 1.0 / sqrt(N);
    
    for (int k = 0; k < N; k++) {
        Complex sum(0.0, 0.0);
        for (int j = 0; j < N; j++) {
            double angle = -2.0 * PI * k * j / N;
            sum += input[j] * Complex(cos(angle), sin(angle));
        }
        output[k] = sum * scale;
    }
    return output;
}

vector<Complex> computeIDFT(const vector<Complex>& input) {
    int N = input.size();
    vector<Complex> output(N);
    double scale = 1.0 / sqrt(N);
    
    for (int j = 0; j < N; j++) {
        Complex sum(0.0, 0.0);
        for (int k = 0; k < N; k++) {
            double angle = 2.0 * PI * k * j / N;
            sum += input[k] * Complex(cos(angle), sin(angle));
        }
        output[j] = sum * scale;
    }
    return output;
}

// ================== –ë–ü–§ —Ñ—É–Ω–∫—Ü–∏–∏ ==================
// –ü—Ä—è–º–æ–µ –ë–ü–§ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
vector<Complex> fft(const vector<Complex>& x) {
    int N = x.size();
    if (N == 1) return x;
    
    vector<Complex> even(N/2);
    vector<Complex> odd(N/2);
    
    for (int k = 0; k < N/2; k++) {
        even[k] = x[k] + x[k + N/2];
        Complex temp = x[k] - x[k + N/2];
        double angle = -2.0 * PI * k / N;
        odd[k] = temp * Complex(cos(angle), sin(angle));
    }
    
    vector<Complex> even_fft = fft(even);
    vector<Complex> odd_fft = fft(odd);
    
    vector<Complex> result(N);
    for (int k = 0; k < N/2; k++) {
        result[k] = even_fft[k];
        result[k + N/2] = odd_fft[k];
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–ü–§
    double scale = 1.0 / sqrt(N);
    for (int i = 0; i < N; i++) {
        result[i] *= scale;
    }
    
    return result;
}

// –û–±—Ä–∞—Ç–Ω–æ–µ –ë–ü–§ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
vector<Complex> ifft(const vector<Complex>& x) {
    int N = x.size();
    if (N == 1) return x;
    
    vector<Complex> even(N/2);
    vector<Complex> odd(N/2);
    
    for (int k = 0; k < N/2; k++) {
        even[k] = x[k] + x[k + N/2];
        Complex temp = x[k] - x[k + N/2];
        double angle = 2.0 * PI * k / N;
        odd[k] = temp * Complex(cos(angle), sin(angle));
    }
    
    vector<Complex> even_ifft = ifft(even);
    vector<Complex> odd_ifft = ifft(odd);
    
    vector<Complex> result(N);
    for (int k = 0; k < N/2; k++) {
        result[2 * k] = even_ifft[k];
        result[2 * k + 1] = odd_ifft[k];
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –û–î–ü–§
    double scale = 1.0 / sqrt(N);
    for (int i = 0; i < N; i++) {
        result[i] *= scale;
    }
    
    return result;
}

// –§—É–Ω–∫—Ü–∏—è scaleIFFT (–∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞)
vector<Complex> scaleIFFT(const vector<Complex>& x) {
    return ifft(x);  // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º ifft, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω
}

// ================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==================
vector<Complex> readBinaryFile(const string& filename) {
    ifstream file(filename, ios::binary | ios::ate);
    streamsize size_bytes = file.tellg();
    file.seekg(0, ios::beg);
    
    int num_doubles = size_bytes / sizeof(double);
    int N = num_doubles / 2;
    
    vector<double> buffer(num_doubles);
    file.read((char*)buffer.data(), size_bytes);
    file.close();
    
    vector<Complex> signal(N);
    for (int i = 0; i < N; i++) {
        signal[i] = Complex(buffer[2*i], buffer[2*i+1]);
    }
    return signal;
}

void writeBinaryFile(const vector<Complex>& data, const string& filename) {
    ofstream file(filename, ios::binary);
    vector<double> buffer(2 * data.size());
    
    for (size_t i = 0; i < data.size(); i++) {
        buffer[2*i] = data[i].real();
        buffer[2*i+1] = data[i].imag();
    }
    
    file.write((char*)buffer.data(), buffer.size() * sizeof(double));
    file.close();
}

// –ù–æ—Ä–º–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤
double vectorNorm(const vector<Complex>& a, const vector<Complex>& b) {
    double norm = 0.0;
    for (size_t i = 0; i < a.size(); i++) {
        norm += abs(a[i] - b[i]) * abs(a[i] - b[i]);
    }
    return sqrt(norm);
}

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
double maxError(const vector<Complex>& a, const vector<Complex>& b) {
    double max_err = 0.0;
    for (size_t i = 0; i < a.size(); i++) {
        double err = abs(a[i] - b[i]);
        if (err > max_err) max_err = err;
    }
    return max_err;
}

int main() {
    cout << "=== –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–û–í ===" << endl;
    cout << "–†–∞–∑–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞: N = 1024 (2¬π‚Å∞)" << endl << endl;
    
    // –ß—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    vector<Complex> X = readBinaryFile("performance_signals/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π_1024.bin");
    cout << "1. –ó–∞–≥—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª X –¥–ª–∏–Ω–æ–π " << X.size() << " —Ç–æ—á–µ–∫" << endl;
    
    // ================== –ü–†–û–í–ï–†–ö–ê 1: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ==================
    cout << endl << "1. –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–ê:" << endl;
    
    // –î–ü–§ ‚Üí –û–î–ü–§
    vector<Complex> dft_X = computeDFT(X);
    vector<Complex> idft_dft_X = computeIDFT(dft_X);
    double error_dft = maxError(X, idft_dft_X);
    cout << "   X = –û–î–ü–§(–î–ü–§(X)): –æ—à–∏–±–∫–∞ = " << scientific << error_dft;
    if (error_dft < 1e-10) cout << " ‚úì –£–°–ü–ï–•";
    else cout << " ‚ö† –û–®–ò–ë–ö–ê";
    cout << endl;
    
    // –ë–ü–§ ‚Üí –û–ë–ü–§
    vector<Complex> fft_X = fft(X);
    vector<Complex> ifft_fft_X = scaleIFFT(fft_X);  // –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å!
    double error_fft = maxError(X, ifft_fft_X);
    cout << "   X = –û–ë–ü–§(–ë–ü–§(X)): –æ—à–∏–±–∫–∞ = " << scientific << error_fft;
    if (error_fft < 1e-10) cout << " ‚úì –£–°–ü–ï–•";
    else cout << " ‚ö† –û–®–ò–ë–ö–ê";
    cout << endl;
    
    // ================== –ü–†–û–í–ï–†–ö–ê 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–ü–§ –∏ –ë–ü–§ ==================
    cout << endl << "2. –°–†–ê–í–ù–ï–ù–ò–ï –î–ü–§ –ò –ë–ü–§:" << endl;
    
    // –ü–æ—Å–∫–æ–ª—å–∫—É –∏ –î–ü–§ –∏ –ë–ü–§ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ,
    // –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
    double norm_diff_dft_fft = vectorNorm(dft_X, fft_X);
    cout << "   –ù–æ—Ä–º–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –î–ü–§(X) –∏ –ë–ü–§(X): " << scientific << norm_diff_dft_fft;
    if (norm_diff_dft_fft < 1e-10) cout << " ‚úì –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–í–ü–ê–î–ê–Æ–¢";
    else cout << " ‚ö† –†–ê–ó–õ–ò–ß–ò–Ø";
    cout << endl;
    
    // ================== –ü–†–û–í–ï–†–ö–ê 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Python ==================
    cout << endl << "3. –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø:" << endl;
    
    writeBinaryFile(X, "signal_X_1024.bin");
    writeBinaryFile(dft_X, "dft_result_1024.bin");
    writeBinaryFile(fft_X, "fft_result_1024.bin");
    
    cout << "   –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:" << endl;
    cout << "   - signal_X_1024.bin (–∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª)" << endl;
    cout << "   - dft_result_1024.bin (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ü–§)" << endl;
    cout << "   - fft_result_1024.bin (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ü–§)" << endl;
    cout << "   –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å numpy.fft.fft –≤ Python" << endl;
    
    // ================== –í–´–í–û–î –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==================
    cout << endl << "=== –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===" << endl;
    cout << "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –î–ü–§: " << scientific << error_dft << endl;
    cout << "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–ü–§: " << scientific << error_fft << endl;
    cout << "–†–∞–∑–Ω–æ—Å—Ç—å –î–ü–§/–ë–ü–§: " << scientific << norm_diff_dft_fft << endl;
    
    if (error_dft < 1e-10 && error_fft < 1e-10 && norm_diff_dft_fft < 1e-10) {
        cout << "üéâ –í–°–ï –ê–õ–ì–û–†–ò–¢–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!" << endl;
    } else {
        cout << "‚ö† –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –†–ï–ê–õ–ò–ó–ê–¶–ò–ò" << endl;
    }
    
    return 0;
}